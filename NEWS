CC Mode NEWS -- user visible changes.  -*- mode:outline -*-

* Changes in 5.24

Note: See also changes in 5.23 to get the complete list of additions
since the last public release.

** c-default-style can now take an association list that maps major
modes to style names.  When this variable is an alist, Java mode no
longer hardcodes a setting to "java" style.  See the variable's
docstring for details.

** It's now possible to put a list as the offset on a syntactic
symbol.  The list is evaluated recursively until a non-nil offset is
found.  This is useful to combine several lineup functions to act in a
prioritized order on a single line.  However, none of the supplied
lineup functions use this feature currently.

** New syntactic symbol catch-clause, which is used on the "catch" and
"finally" lines in try-catch constructs in C++ and Java.

** New cleanup brace-catch-brace on c-cleanup-list, which does for
"catch" lines what brace-elseif-brace does for "else if" lines.

** The braces of Java anonymous inner classes are treated separately
from the braces of other classes in auto-newline mode.  Two new
symbols inexpr-class-open and inexpr-class-close may be used on
c-hanging-braces-alist to control the automatic newlines used for
anonymous classes.

** bug-cc-mode@gnu.org is now the primary bug reporting address.
This is an alias for cc-mode-help@python.org.

* Changes in 5.23

Note: Due to the extensive changes, this version was a beta test
release that was never publically announced.

** Support for the Pike language added, along with new Pike specific
syntactic symbols: inlambda, lambda-intro-cont

** Support for Java anonymous classes via new syntactic symbol
inexpr-class.  New syntactic symbol inexpr-statement for Pike
support and gcc-style statements inside expressions.  New lineup
function c-lineup-inexpr-stat.

** New syntactic symbol brace-entry-open which is used in brace lists
(i.e. static initializers) when a list entry starts with an open
brace.  These used to be recognized as brace-list-entry's.
c-electric-brace also recognizes brace-entry-open braces
(brace-list-entry's can no longer be electrified).

** New command c-indent-line-or-region, not bound by default.

** Improvements to M-C-h (c-mark-function).

** `#' is only electric when typed in the indentation of a line.

** Parentheses are now electric (via the new command c-electric-paren)
for auto-reindenting lines when parens are typed.

** In "gnu" style, inline-open offset is now set to zero.

** Uniform handling of the inclass syntactic symbol.  The indentation
associated with it is now always relative to the class opening brace.
This means that the indentation behavior has changed in some
circumstances, but only if you've put anything besides 0 on the
class-open syntactic symbol (none of the default styles do that).

** c-enable-xemacs-performance-kludge-p is set to nil by default,
since for Emacs-friendly styles (i.e. where the top-level opening
brace starts in column zero) setting this variable to t can degrade
performance significantly.

* Changes in 5.22

Note: There was no net release of 5.22!  This version went only to the
XEmacs developers and was primarily a bug fix release.

* Changes in 5.21

This is a bug fix release only.

* Changes in 5.20

** Multiline macros are now handled, both as they affect indentation,
and as recognized syntax.  New syntactic symbol cpp-macro-cont is
assigned to second and subsequent lines of a multiline macro
definition.

** A new style "user" which captures all non-hook-ified
(i.e. top-level) .emacs file variable setings and customizations.
Style "cc-mode" is an alias for "user" and is deprecated.  "gnu" style
is still the default however.

** "java" style now conforms to Sun's JDK coding style.

** New commands c-beginning-of-defun, c-end-of-defun which are not
bound by default to C-M-a and C-M-e.

** New and improved implementations of M-a (c-beginning-of-statement)
and M-e (c-end-of-statement).

** C++ namespace blocks are supported, with new syntactic symbols
namespace-open, namespace-close, and innamespace.

** File local variable settings of c-file-style and c-file-offsets
makes the style variables local to that buffer only.

** New indentation functions c-lineup-close-paren,
c-indent-one-line-block, c-lineup-dont-change.

** Various Imenu patches (thanks to Masatake Yamato, Jan Dubois, and
Peter Pilgrim).

** Performance improvements.  Some improvements affect only Emacs or
only XEmacs (see the variable c-enable-xemacs-performance-kludge-p).

** Improvements (hopefully!) to the way CC Mode is loaded.  You should
now be able to do a (require 'cc-mode) to get the entire package
loaded properly for customization in your .emacs file.  A new variable
c-initialize-on-load controls this and is set to t by default.

* Changes in 5.19

** extern-lang-close relative buffer positions have changed.  The used
to point to the extern's open brace, but they now point to the first
non-whitespace character on the line with the open brace.

** c-progress-interval's semantics have changed slightly.  When set to
nil, indentation proceeds silently.  Previously, even when nil, the
start and end messages were printed.

* Changes in 5.18

** M-a and M-e should now properly move into comments when point is
before or after a comment, and move by sentences when inside a
comment.

** c-electric-slash should be bound in all modes now.  Also,
c-expand-macro is not bound in Java or IDL modes.

** Imenu enhancements: Objective-C support donated by Masatake (jet)
YAMATO; a fix to Java support given by Ake Stenhoff; and improvements
to C++ support given by Jan Dubois.

* Changes in 5.17

** Recognition of enum declarations in K&R argdecls.

** Changes to "python" style to more closely match Python C API coding
standards.

** / is bound to c-electric-slash in all modes, and C-c C-e is bound
to c-expand-macro in all languages except Java and IDL.

* Changes in 5.16

This is primarily a bug fix release.  Users of XEmacs 19.15 and Emacs
19.34 are highly encouraged to pick up this release.

* Changes in 5.15

** A new syntactic symbol: template-args-cont, used in C++ template
declarations where the argument list spans multiple lines.

** In "java" style, c-hanging-comment-starter-p defaults to nil to
preserve Javadoc starter lines.

** Line oriented comments (i.e. C++ style comments) are now recognized
by default in all modes, including C mode (as per the ANSI 9X C draft
standard).  Thus the function c-enable-//-in-c-mode has been removed.

** Auto-filling of comments has been improved.  CC Mode will now
properly auto-fill both line and block oriented comments, and allows
you to choose the leader string on block oriented continued comments,
via the variable c-comment-continuation-stars.  See the CC Mode manual
for details.

** c-electric-slash is electric in all modes.

** The need for c-mode-19.el is automatically detected now.  You do
not need to load or require it in your .emacs file.

* Changes in 5.14

** Support for CORBA's IDL language.  There is now a new mode called
idl-mode, with all the expected hooks, abbreviation tables, etc.

** In "java" style, c-hanging-comment-starter-p is set to nil by
default to preserve Javadoc comments.

** A new hook variable: c-initialization-hook. This is called only
once an X/Emacs session, when the CC Mode package is initialized.

* Changes in version 5

CC Mode version 5 was a major upgrade, as evidenced by the change in
major revision number.  Here is a list of the important user visible
changes in CC Mode 5.

** CC Mode 5 will not work with Emacs 18, and will only work with the
latest Emacs and XEmacs releases.

** c-mode-map is no longer the base keymap for all modes.  This was
incompatible with the way Emacs 19 supports menus, so now
c-mode-base-map is the base map for all modes (including c-mode-map).
If you are installing custom keybindings into c-mode-map and expecting
them to be present in all other modes, this will break.  Put your
keybindings in c-mode-base-map instead.

** The function c-electric-delete and variable c-delete-function are
handled differently now, in order to accomodate the separation of the
BackSpace and Delete keysyms.  CC Mode now binds only the Delete
keysym to c-electric-delete (which runs c-delete-function), and the
BackSpace keysym to c-electric-backspace (which runs
c-backspace-function).  See the CC Mode manual for details.

** The single cc-mode.el file was simply too unwieldy so I have split
the file up.  See the MANIFEST file for details.

** Also, all user variables have been converted to Per Abrahamsen's
Custom library, and all support for older Emacsen have been ripped
out.  See the release notes for details of running CC Mode 5 in your
version of Emacs.

** All style variables are now global by default.  Specifically, the
default value for c-style-variables-are-local-p is nil.  The same
rules apply as before, only reversed: if you want the style variables
to be buffer local, you should set c-style-variables-are-local-p to t
before you load CC Mode.
