Checklist for doing a release
=============================

    - Run regression tests in as many Emacsen as possible.  Make sure
      there are no failures.

    - Proofread manual.

    - Update ChangeLog.

    - Add `Release 5.xx' tag to ChangeLog using C-x 4 a.  Release.py
      script looks for this.

    - Distill changes for NEWS file.

    - Proofread and update ANNOUNCEMENT, MANIFEST, NEWS, README for
      the new release.  Make sure the copyright statements in all
      files are up-to-date.

    - Update the web files in the admin directory:

      o  Create a new changes-5xx.php file from the new items i NEWS.
      o  Add a new entry for the changes file in changelinks.h.
      o  Update the version number in index.php and release.php.
      o  Check at least release.php for correctness.

    - Run "make release" to make all the tarballs and documentation.

      XX is the minor revision number of the new release.

      This creates the following files in dist:
          cc-mode-5.XX.emacs.tar.gz
          cc-mode-5.XX.xemacs.tar.gz
          cc-mode-5.XX.tar.gz
          cc-mode.dvi.gz
          cc-mode.ps.gz
          cc-mode.rev.ps.gz
          cc-mode.info.tar.gz
	  cc-mode.html.tar.gz

      The first two tarballs is to be sent to Emacs and XEmacs
      respectively.  They contain only the files that are necessary
      for those releases.  However, I typically don't send them stuff
      until they see the Net announcements and ask for the files.
      This lets them sync our releases up to their own release cycle.

    - Update the SourceForge site:

      o  Do a new release in the SourceForge pages.
      o  Copy the manual files to the manual subdir.
      o  Unpack the standalone tarball into the web root dir and name
	 the subdir "src".
      o  Additionally, copy ChangeLog into the "src" subdir.
      o  Unpack cc-mode.html.tar.gz into the web root dir and name the
	 subdir "html-manual".
      o  Update the web files with cvs update.
      o  Check that the links work.

    - Send ANNOUNCEMENT file to
      cc-mode-announce@lists.sourceforge.net.  (Don't forget to use
      the correct sender and From header.)

    - Post ANNOUNCEMENT to the following newsgroups:
	gnu.emacs.sources
	comp.emacs.xemacs
	comp.emacs
      (Don't forget the correct sender here either.)

    - Tag the release using "./Release.py --tag XX" where XX is the
      number used above.  If you find a problem in the released
      tarball, retag using -T option.  Very important!  Make sure the
      tag is set before doing the bump (next step).

    - Bump the current release by running "./Release.py --bump XX+1"
      Do not do this until the previous release has been tagged, and
      only do this as a last step!

    - You're now ready to start hacking the next version.


Patch releases
==============

    -  Every "real" release beginning with 5.30 is a branch, tagged
       "Branch_5_30", "Branch_5_31", etc.

    -  There's also a normal tag on the form "Release_5_30" so that
       the original release version can be found.

    -  On the branch there are tags for so-called "patch releases",
       e.g. "Patch_5_30_1", "Patch_5_30_2", etc.

    -  A patch release is intended to be as lightweight as possible.
       Every time a fixed version should be spread to Emacs, XEmacs or
       the standalone dist, a patch release should be made for that
       version.  The reason is to make the version numbers in bug
       reports accurate.

    -  A patch release is made as follows:

       1.  Update the ChangeLog file with any changes that aren't
	   there already.  (I use "make rcs2log", paste in the output
	   at the top of ChangeLog, and then edit it as necessary.)
       2.  Add an entry "* Patch release 5.30.NN" to the top of the
	   ChangeLog.  NN is the patch count that's last in the
	   version string in cc-defs.el.
       3.  Commit it.  (Also make sure everything else that should go
           in is committed.)
       4.  Do "cvs tag Patch_5_30_NN".
       5.  Use the file tree in this state to send it whereever it
           should go.
       6.  Increase the patch count in the version string in
           cc-defs.el and commit it.  That's the only place where the
           patch count is present; it's enough to make it show in bug
           reports and when people do M-x c-version.

       (Release.py automates some of this for a real release, but it's
       not yet adapted for patch releases.)

    -  Since patch releases are so lightweight, they can be made
       fairly easily and without discussion.  The only requirement is
       that the ChangeLog is updated (since it's necessary when
       merging the version into Emacs).  Spreading and announcing a
       patch release is optional; one can e.g. make one only to give
       to the XEmacs people, or only to upload to the web site.

    -  Every fix and improvement _must_ be committed to the
       development branch, i.e. the main trunk.  The only exception is
       if it only concerns code that isn't applicable there anymore.

    -  Bug fixes which are small or fairly safe should be committed to
       the patch branch so that they can be spread more quickly.
       Minor improvements are also ok if they don't affect the
       stability.  However, if an improvement would be large enough to
       warrant an entry in the NEWS file, it's probably too big to
       slip into the patch branch.

    -  To incorporate a fix into the other branch, one can do this
       right before it's committed:

	 > cvs diff -u | patch -d ../cc-other -p0

       "cc-other" is a tree where the other branch is checked out.  (A
       tip is to always have two trees checked out, one for each
       branch.)

       If the patch goes well, files in both trees can be committed
       conveniently with the same cvs command and the same message.

    -  When there's enough reason for it, the latest patch release is
       made available from the web site.  At that point it can be
       announced on cc-mode-help@gnu.org, or maybe even on all the
       places like a "real" release.

       "Enough reason" is typically either that some time has gone by
       so that a bunch of minor fixes have accumulated, or that a
       really nasty bug has been fixed.
