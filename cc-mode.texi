\input texinfo   @c -*- texinfo -*-

@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@comment %**start of header (This is for running Texinfo on a region)
@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

@setfilename  cc.info
@settitle     cc-mode Documentation

@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@comment @setchapternewpage odd !! we don't want blank pages !!
@comment %**end of header (This is for running Texinfo on a region)
@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@comment README for @file{cc-mode.el} 4.85
@comment Barry A. Warsaw <bwarsaw@cnri.reston.va.us>
@comment 1994/09/10 17:18:01
@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@comment The following line inserts the copyright notice 
@comment into the Info file.
@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

@ifinfo
Copyright @copyright{} 1988 Free Software Foundation, Inc.
@end ifinfo

@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@comment !!!The titlepage section does not appear in the Info file.!!!
@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

@titlepage
@sp 10


@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@comment The title is printed in a large font.
@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

@center @titlefont{cc-mode Documentation}


@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@comment  The following two commands start the copyright page
@comment  for the printed manual.  This will not appear in the Info file.
@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

@page
@vskip 0pt plus 1filll
Copyright @copyright{} year copyright-owner
@end titlepage


@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@comment The Top node contains the master menu for the Info file.
@comment This appears only in the Info file, not the printed manual.
@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

@node    Top,       Introduction, (dir),    (dir)
@comment node-name, next,          previous, up


@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

@menu
* Introduction::
* Getting Started::
* New indentation engine::
* Customizing indentation::
* Frequently Asked Questions::
* Sample .emacs file::
* cc-mode.el vs. c-mode.el::
* cc-mode.el vs. c++-mode.el 2.353::
* Requirements::
* Limitations and known bugs::
* Electronic Mail::
* reporter.el info::
* User visible changes since 4.35::
* User visible changes since 3.349::
* User visible changes since 3.304::
* User visible changes since 3.229::
* Dumping cc-mode 4.85::
* Concept Index::
@end menu

@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

@node     Introduction, Getting Started, Top,      Top
@comment  node-name,    next,            previous, up
@chapter  Introduction
@cindex   Introduction

Welcome to @code{cc-mode}, version 4.  This is an Emacs Lisp mode for
editing C, C++, and Objective-C in GNU Emacs.  This mode is
descendant from @file{c-mode.el} (also called "Boring Old C Mode" or bocm
:-), and @file{c++-mode.el}, version 2, which I have been maintaining
since 1992.  @code{cc-mode} represents a significant milestone in the
mode's life.  It has been fully merged back with Emacs 19's
@file{c-mode.el}. Also a new, more intuitive and flexible mechanism for
controlling indentation has been developed.  More on this below.

You can now use @code{cc-mode} to edit K&R and ANSI C, most ARM C++, and
Objective-C programs.  See below for limitations.

This manual will describe the following:

@itemize @bullet
@item
How to get started using @code{cc-mode}.

@item
How to customize the new indentation engine.

@item
The differences between @file{cc-mode.el} and bocm @file{c-mode.el}.

@item
The differences between @file{cc-mode.el} and @file{c++-mode.el}.
@end itemize

Note that the name of the file is @file{cc-mode.el}, and I'll often refer
to the mode as @code{cc-mode}, but there really is no top level @code{cc-mode}
entry point.  I call it @code{cc-mode} simply to differentiate it from
@file{c-mode.el}.  All of the variables, commands, and functions in
@code{cc-mode} are prefixed with @code{c-<thing>}, and @code{c-mode},
@code{c++-mode}, and @code{objc-mode} entry points are provided.  This
file is intended to be a replacement for @file{c-mode.el} and
@file{c++-mode.el} -- you should be able to remove them and dump Emacs
with @file{cc-mode.el} instead. See @ref{Dumping cc-mode 4.85} for details
on how to do this. 

The major version number was incremented to 4 with the addition of
@code{objc-mode}. This distribution contains release 4.85 of @code{cc-mode}.
See @ref{User visible changes since 4.35} for a list of changes since
the last release version 4.35. 

XEmacs 19.11 (formerly Lucid Emacs) now comes with @file{cc-mode.el} 4.85 
dumped in the executable.  It has completely replaced @file{c-mode.el}
and @file{c++-mode.el}.  Both XEmacs and this distribution now contain a
new file called @file{cc-compat.el} which should ease your transition
from bocm to @code{cc-mode}.  It comes unguaranteed and unsupported.


@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

@node     Getting Started, New indentation engine, Introduction,      Top
@comment  node-name,       next,                   previous,          up
@chapter  Getting Started
@cindex   Getting Started

@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

@file{cc-mode.el} works well with the 2 main branches of Emacs 19, XEmacs
(former Lucid Emacs) and the Emacs 19 maintained by the FSF.
FSF's Emacs 19 users will want to use Emacs version 19.21 or
better, XEmacs/Lucid users will want 19.6 or better.  @file{cc-mode.el}
works moderately well with Emacs 18, if you use the @file{cc-mode-18.el}
compatibility file.  A word of warning though, Emacs 18 lacks some
fundamental functionality that makes Emacs 18 support a losing
battle.  Hence it is no longer supported and it is highly
recommended that you upgrade to Emacs 19.  If you use @code{cc-mode}
under Emacs 18, you're on your own.  With @code{cc-mode} version 5, Emacs
18 support will be dropped altogether. Note that XEmacs 19.11 and better
already comes with @code{cc-mode} configured for your use. You should be
able to skip all the setup steps in this chapter, however you may want
to read the following description over in case you encounter any
problems in your Emacs configuration.

The first thing you will want to do is put @file{cc-mode.el} somewhere on your
@code{load-path} where Emacs can find it.  Do a @kbd{C-h v load-path} to see
all the directories Emacs looks at when loading a file.  If none
of these directories are appropriate, create a new directory and
add it to your @code{load-path}:

@example
[in the shell]
% cd
% mkdir mylisp
% mv cc-mode.el mylisp
% cd mylisp

[in your .emacs file add]
(setq load-path (cons "~/mylisp" load-path))
@end example

Next you want to @code{byte-compile} @file{cc-mode.el}.  The mode uses a lot of
macros so if you don't @code{byte-compile} it, things will be unbearably
slow.  @emph{You can ignore all byte-compiler warnings!}  They are the
result of the multi-Emacs support and none of the warnings have
any effect on operation. Let me say this again: @strong{You really can
ignore all byte-compiler warnings!}

Here's what to do to @code{byte-compile} the file [in emacs]:

@example
M-x byte-compile-file RET ~/mylisp/cc-mode.el RET
@end example

Most users will probably be running an Emacs that already has bocm
@file{c-mode.el} dumped.  You will not want to use this, or any older
releases of @file{c++-mode.el} if you use @file{cc-mode.el}.  If your Emacs is
dumped with either of these files you first need to make Emacs
``forget'' about those older modes.

If you can do a @kbd{C-h v c-mode-map} you probably need to add these
lines at the top of your @file{.emacs} file:

@example
(fmakunbound 'c-mode)
(makunbound  'c-mode-map)
(fmakunbound 'c++-mode)
(makunbound  'c++-mode-map)
(makunbound  'c-style-alist)
@end example

After those lines you will want to add the following autoloads to
your @file{.emacs} file so that @code{cc-mode} gets loaded at the right time:

@example
(autoload 'c++-mode  "cc-mode" "C++ Editing Mode" t)
(autoload 'c-mode    "cc-mode" "C Editing Mode" t)
(autoload 'objc-mode "cc-mode" "Objective-C Editing Mode" t)
@end example

Next, you will want to set up Emacs so that it edits C files in
@code{c-mode}, C++ files in @code{c++-mode}, and Objective-C files in
@code{objc-mode}. All users should add the
following to your @file{.emacs} file after the @code{autoload} lines
above.  Note that this assumes you'll be editing @code{.h} and @code{.c}
files as C, @code{.hh}, @code{.C}, and @code{.cc} files as C++, and
@code{.m} files as Objective-C. Your mileage may vary: 

@example
(setq auto-mode-alist
  (append
    '(("\\.C$"  . c++-mode)
      ("\\.cc$" . c++-mode)
      ("\\.hh$" . c++-mode)
      ("\\.c$"  . c-mode)
      ("\\.h$"  . c-mode)
      ("\\.m$"  . objc-mode)
     ) auto-mode-alist))
@end example

You may already have some or all of these settings on your
@code{auto-mode-alist}, but it won't hurt to put them on there again.

That's all you need. After you've done all this, you should quit
and restart Emacs.  The next time you visit a C, C++, or
Objective-C file you should be using @code{cc-mode}.  You can check this
easily by hitting @kbd{C-c C-v} in the @code{c-mode}, @code{c++-mode},
or @code{objc-mode} buffer.  You should see this message in the echo area:

@example
Using @code{cc-mode} version 4.85
@end example

@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

@node     New indentation engine, Customizing indentation, Getting Started, Top
@comment  node-name,              next,                    previous,up

@chapter  New indentation engine
@cindex   New indentation engine

@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

@code{cc-mode} has a new indentation engine, providing a simplified, yet
flexible and general mechanism for customizing indentation. It
breaks indentation calculation into two steps. First it tries to
figure out what kind of language construct its looking at, then it
applies a user defined offset to the current line based on the
type of construct it finds.

This section will briefly cover how indentation is calculated in
@code{cc-mode}. Only enough detail will be given so that you will know
how to customize indentation.  You can also contact the help address
@ref{Electronic Mail}. 

@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

@menu
* Step 1 -- Syntactic Analysis::
* Step 2 -- Indentation Calculation::
@end menu
@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@node  Step 1 -- Syntactic Analysis, Step 2 -- Indentation Calculation, , New indentation engine
@comment  node-name,              next,                    previous,up
@section  Step 1 -- Syntactic Analysis
@cindex   Step 1 -- Syntactic Analysis
@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

In the first step, @code{cc-mode} looks at the line you are currently
indenting and tries to determine the syntactic components of the
construct on that line.  @code{cc-mode} builds a list of these syntactic
components, where each component on the list contains a ``syntactic
symbol'' and a relative buffer position.  Syntactic symbols
describe elements of C/C++/Objc code such as @code{statement},
@code{substatement}, @code{class-open}, @code{class-close},
@code{knr-argdecl}, etc. You can do a @kbd{C-h v c-offsets-alist} to see
the entire list of support syntactic symbols along with a description of the
constructs they represent.

Conceptually, a line of C/C++/Objc code is always indented
relative to the indentation of some line higher up in the buffer.
This is represented by the relative buffer positions in the
syntactic component list.

Here's an example. Suppose we had the following code in a @code{c++-mode}
buffer (the line numbers don't actually appear in the buffer):

@example
  Example 1:

    1: void swap( int& a, int& b ) 
    2: @{
    3:     int tmp = a;
    4:     a = b;
    5:     b = tmp;
    6: @}
@end example

We can use the command @kbd{C-c C-s} (@code{c-show-syntactic-information}) to
simply report what syntactic analysis is for a line.  If we hit
@kbd{C-c C-s} on line 4, we'd see in the echo area:

@example
((statement . 36))
@end example

This tells us that the line is a statement and it is indented
relative to buffer position 36, which happens to be the @code{i} in
@code{int} on line 3.  If you were to move point to line 3 and hit 
@kbd{C-c C-s}, you would see:

@example
((defun-block-intro . 30))
@end example

This indicates that the @code{int} line is the first statement in a
block, and is indented relative to buffer position 30, which is
the brace just after the function header.

Here's another example:
@example 
  Example 2:

    1: int add( int val, int incr, int doit )
    2: @{
    3:     if( doit )
    4:         @{
    5:             return( val + incr );
    6:         @}
    7:     return( val );
    8: @}
@end example

Hitting @kbd{C-c C-s} on line 4 gives us:

@example
((substatement-open . 46))
@end example

which tells us that this is a brace that @emph{opens} a substatement
block. By the way, a @emph{substatement} indicates the line after an
@code{if}, @code{else}, @code{while}, @code{do}, @code{switch}, and
@code{for} statements.  See the variable @code{c-offsets-alist} for a
full description of the available syntactic symbols.

Syntactic analysis lists can contain more than one element
(i.e. cons cell), and syntactic symbols need not have relative
buffer positions.

@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@node  Step 2 -- Indentation Calculation, , Step 1 -- Syntactic Analysis, New indentation engine
@comment  node-name,              next,                    previous,up
@section  Step 2 -- Indentation Calculation
@cindex   Step 2 -- Indentation Calculation
@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

Indentation for the current line is calculated using the list of
syntactic components derived in step 1 above.  Each component
contributes to the final total indentation of the line in two
ways.

First, the syntactic symbol is looked up in the @code{c-offsets-alist}
variable, which is an association list of syntactic symbols and
the offsets to apply for those symbols.  This offset is added to
the running total.

Second, if the component has a relative buffer position, @code{cc-mode}
adds the column number of that position to the running total.  By
adding up the offsets and columns for every syntactic component on
the list, the final total indentation for the current line is
computed.

Lets use our two code examples above to see how this works.  Just
as a reminder and a convenience the code is presented again here.

@example
  Example 1:

    1: void swap( int& a, int& b ) 
    2: @{
    3:     int tmp = a;
    4:     a = b;
    5:     b = tmp;
    6: @}
@end example

Lets say point is on line 3 and we hit the @key{TAB} key to re-indent
the line.  Remember that the syntactic component list for that
line is:

@example
((defun-block-intro . 30))
@end example

So first @code{cc-mode} is going to look up @code{defun-block-intro} in the
@code{c-offsets-alist} variable.  Lets say it find the integer @code{4}; it
adds this to the running total (initialized to zero), yielding a
running total indentation of 4 spaces.

Next @code{cc-mode} goes to buffer position 30 and asks for the current
column.  Since the brace at buffer position 30 is in column zero,
it adds 0 to the running total, and since there is only one
syntactic component on the list for this line, the total
indentation for the line is 4 spaces.

@example
  Example 2:

    1: int add( int val, int incr, int doit )
    2: @{
    3:     if( doit )
    4:         @{
    5:             return( val + incr );
    6:         @}
    7:     return( val );
    8: @}
@end example

If we were to hit @key{TAB} on line 4 in example 2 above, the same basic
process is performed, despite the differences in the syntactic
component list.  Remember that the list for this line is:

@example
((substatement-open . 46))
@end example

Here, @code{cc-mode} first looks up the @code{substatement-open} symbol in
@code{c-offsets-alist}, for which it might find @code{4}.  At this point the
running total is 4 (0 + 4 = 4).  @code{cc-mode} then goes to buffer
position 46, which is the @code{i} in @code{if} on line 3.  This character
is in the fourth column on that line so adding this to the running
total, yields an indentation for the line of 8 spaces.

Simple, huh?

Actually, the mode usually just does The Right Thing without you
having to think about it in this much detail.  But when
customizing indentation, its good to have a general idea of the
indentation model being used.

@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@node     Customizing indentation, Frequently Asked Questions, New indentation engine, Top
@comment  node-name,              next,                    previous,up

@chapter  Customizing indentation
@cindex   Customizing indentation
@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

The @code{c-offsets-alist} variable is where you customize all your
indentations.  You simply need to decide what additional offset
you want to add for every syntactic symbol.  You can use the
command @kbd{C-c C-o} (@code{c-set-offset}) as the way to set offsets, both
interactively and from your mode hook.  Also, you can set up
@emph{styles} of indentation just like in standard @file{c-mode.el}.  But
you'll probably find that most of the offsets are right for your
style.

In fact, the offset values in @code{c-offsets-alist} can be an integer, a
function or variable name, or one of the following symbols: @code{+}, @code{-},
@code{++}, or @code{--}, indicating positive or negative multiples of the
variable @code{c-basic-offset}.  Thus if you like the general indentation
levels, but you use 3 spaces instead of 4 spaces per level, you
can probably achieve your style by just changing @code{c-basic-offset}
like so (in your @file{.emacs} file):

@example
(setq c-basic-offset 3)
@end example

The offset value can also be a function, and this can really give
power users a lot of flexibility in customizing indentation.

As an example of how to customize indentation, lets change the
style of example 2 above from:

@example
    1: int add( int val, int incr, int doit )
    2: @{
    3:     if( doit )
    4:         @{
    5:             return( val + incr );
    6:         @}
    7:     return( val );
    8: @}
@end example

    to:

@example
    1: int add( int val, int incr, int doit )
    2: @{
    3:     if( doit )
    4:     @{
    5:         return( val + incr );
    6:     @}
    7:     return( val );
    8: @}
@end example

Since line 4 is the start of the construct we want to re-indent,
we first move to that line and hit @kbd{C-c C-s}:

@example
((substatement-open . 46))
@end example

So we know want to change the @code{substatement-open} indentation.  To
do this interactively, just hit @kbd{C-c C-o}.  This prompts you for the
syntactic symbol to change, giving you a reasonable default, in
this case, @code{substatement-open}, which is just the syntactic symbol
we want to change!

After you hit return @code{cc-mode} will then prompt you for the new
offset value, with the old value as the default.  Hit backspace to
delete the old value, then hit 0 and then return.  This moves
the construct one level of indentation to the left.

To check your changes quickly, just hit @kbd{C-c C-q} to reindent the
entire function.  If this does what you want, you can put the
following lisp in your @code{c-mode-common-hook} (see below for an
example):

@example
(c-set-offset 'substatement-open 0)
@end example

You could also set up a @emph{style} that sets this and all your
customizations in a convenient manner.  See the variable
@code{c-style-alist} and the command @code{c-set-style} for more
information, or take a look at the sample @file{.emacs} file
@ref{Sample .emacs file}.
    
@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@node  Frequently Asked Questions, Sample .emacs file, Customizing indentation, Top
@comment  node-name,              next,                    previous,up

@chapter  Frequently Asked Questions
@cindex   Frequently Asked Questions
@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

@quotation

    Q. How do I re-indent the whole file?

    A. Visit the file and hit @kbd{C-x h} to mark the whole buffer. Then
       hit @kbd{@key{ESC} C-\} to re-indent the entire region which you've just
       marked.

    Q. How do I re-indent the entire function? @kbd{@key{ESC} C-x} doesn't work

    A. @kbd{@key{ESC} C-x} is reserved for future Emacs use.  To re-indent the
       entire function hit @kbd{C-c C-q}.

    Q. How do I re-indent the current block?

    A. First move to the brace which opens the block with @kbd{@key{ESC} C-u},
       then re-indent that expression with @kbd{@key{ESC} C-q}.

    Q. Why doesn't the @key{RET} key indent the line to where the new text
       should go after inserting the newline?

    A. Emacs' convention is that @key{RET} just add a new line, and that
       @key{LFD} adds a newline and indents.  You can make @key{RET} do
       this too by adding this to your @code{c-mode-common-hook} 
       (see the sample @file{.emacs} file @ref{Sample .emacs file}):

@example
       (define-key c-mode-map "\C-m" 'newline-and-indent)
@end example

       This is a very common question. @code{:-)} If you want this to be the
       default behavior, don't lobby me, lobby RMS!

    Q. I put @code{(c-set-offset 'substatement-open 0)} in my
       @file{.emacs} file and I get an error saying that @code{c-set-offset}'s
       function definition is void.

    A. Since @code{cc-mode} is autoloaded, it is typically not loaded into
       your Emacs session by the time of the @code{c-set-offset} call.
       Instead of putting this in your top-level @file{.emacs} file, put the
       call to @code{c-set-offset} in your @code{c-mode-common-hook}.  See the
       sample @file{.emacs} file @ref{Sample .emacs file} for details.

@end quotation


@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@node  Sample .emacs file, cc-mode.el vs. c-mode.el, Frequently Asked Questions, Top
@comment  node-name,              next,                    previous,up

@chapter  Sample @file{.emacs} file
@cindex   Sample @file{.emacs} file
@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

@example

;; Sample .emacs file

;; Of  course there are lots of  other  indentation features that I haven't
;; touched on here.  Here's a sample .emacs file  that might help you along
;; the way.  Just hit  "C-x C-p", then "ESC  w" to  copy this region,  then
;; paste it into your .emacs file with "C-y".  You  may want to change some
;; of the actual values.

(defconst my-c-style
  '("PERSONAL"
    (c-tab-always-indent           . t)
    (c-comment-only-line-offset    . 4)
    (c-hanging-braces-alist        . ((substatement-open after)
				      (brace-list-open)))
    (c-hanging-colons-alist        . ((member-init-intro before)
				      (inher-intro)
				      (case-label after)
				      (label after)
				      (access-label after)))
    (c-cleanup-list                . (scope-operator
				      empty-defun-braces
				      defun-close-semi))
    (c-offsets-alist               . ((arglist-close     . c-lineup-arglist)
				      (substatement-open . 0
				      (case-label        . 4)
				      (block-open        . 0)
				      (knr-argdecl-intro . -)))
    (c-echo-syntactic-information-p . t)
    )
  "My C Programming Style")
  )

;; Customizations for both c-mode and c++-mode
(defun my-c-mode-common-hook ()
  ;; set up for my perferred indentation style, but  only do it once
  (let ((my-style "PERSONAL"))
    (or (assoc my-style c-style-alist)
	(setq c-style-alist (cons my-c-style c-style-alist)))
    (c-set-style my-style))
  ;; offset customizations not in my-c-style
  (c-set-offset 'member-init-intro '++)
  ;; other customizations
  (setq tab-width 8
	;; this will make sure spaces are used instead of tabs
	indent-tabs-mode nil)
  ;; we like auto-newline and hungry-delete
  (c-toggle-auto-hungry-state 1)
  ;; keybindings for C, C++, and Objective-C.  We can put these in
  ;; c-mode-map because c++-mode-map and objc-mode-map inherit it
  (define-key c-mode-map "\C-m" 'newline-and-indent)
  )

;; the following only works in Emacs 19
;; Emacs 18ers can use (setq c-mode-common-hook 'my-c-mode-common-hook)
(add-hook 'c-mode-common-hook 'my-c-mode-common-hook)

@end example

@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@node  cc-mode.el vs. c-mode.el, cc-mode.el vs. c++-mode.el 2.353, Sample .emacs file, Top
@comment  node-name,              next,                    previous,up
@chapter  @file{cc-mode.el} vs. @file{c-mode.el}
@cindex   @file{cc-mode.el} vs. @file{c-mode.el}
@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

@itemize @bullet
@item
New indentation engine @ref{New indentation engine}.

@item
Direct support for C++ and Objective-C editing.

@item
Menubar support (Emacs 19 only).

@item
New variables:
@example
@code{c-mode-common-hook}
@code{c-strict-semantics-p}
@code{c-echo-semantic-information-p}
@code{c-basic-offset}
@code{c-offsets-alist}
@code{c-comment-only-line-offset}
@code{c-block-comments-indent-p}
@code{c-cleanup-list}
@code{c-hanging-braces-alist}
@code{c-hanging-colons-alist}
@code{c-untame-characters}(Emacs 18 users only)
@code{c-special-indent-hook}
@code{c-delete-function}
@code{c-electric-pound-behavior}
@code{c-backscan-limit}(Emacs 18 users only)
@end example

@item
Expanded semantics for variables:
@example
@code{c-tab-always-indent}
@code{c-style-alist}
@end example

@item
New @code{minor-mode} features:
@example
@code{auto-newline}
@code{hungry-delete-key} 
(do @kbd{C-h f @code{c-toggle-auto-hungry-state} @key{RET}}  for more info).
@end example

@item
New commands:
@example
@code{c-toggle-auto-state         (@kbd{C-c C-a})}
@code{c-toggle-hungry-state       (@kbd{C-c C-d})}
@code{c-toggle-auto-hungry-state  (@kbd{C-c C-t})}
@code{c-electric-delete           (@key{DEL})}
@code{c-electric-slash            (@kbd{/})}
@code{c-electric-star             (@kbd{*})}
@code{c-set-offset                (@kbd{C-c C-o})}
@code{c-forward-into-nomenclature}
@code{c-backward-into-nomenclature}
@code{c-scope-operator}
@code{c-tame-insert               (Emacs 18 only)}
@code{c-tame-comments             (Emacs 18 only)}
@code{c-indent-defun              (@kbd{C-c C-q})}
@code{c-show-semantic-information (@kbd{C-c C-s})}
@code{c-version                   (@kbd{C-c C-v})}
@code{c-submit-bug-report         (@kbd{C-c C-b})}
@end example

@item
Renamed commands:
@example
electric-c-brace      => c-electric-brace
electric-c-semi       => c-electric-semi&comma
electric-c-sharp-sign => c-electric-pound
mark-c-function       => c-mark-function
electric-c-terminator => c-electric-colon
indent-c-exp          => c-indent-exp
set-c-style           => c-set-style
@end example

@item
Obsolete variables:
@example
c-indent-level
c-brace-imaginary-offset
c-brace-offset
c-argdecl-indent
c-label-offset
c-continued-statement-offset
c-continued-brace-offset
@end example

@end itemize

@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@node  cc-mode.el vs. c++-mode.el 2.353, Requirements , cc-mode.el vs. c-mode.el, Top
@comment  node-name,              next,                    previous,up
@chapter  @file{cc-mode.el} vs. @file{c++-mode.el} 2.353
@cindex   @file{cc-mode.el} vs. @file{c++-mode.el} 2.353
@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

@itemize @bullet
@item
New Indentation Engine. See @ref{New indentation engine}.

@item
General rename of all variables and defuns from @code{c++-<thing>} to
@code{c-<thing>}.  I don't list them all individually here.

@item
Direct support for C and Objective-C editing.

@item
Menubar support (Emacs 19 only).

@item
New variables:
@example
c-strict-semantics-p
c-echo-semantic-information-p
c-basic-offset
c-offsets-alist
c-style-alist
@end example

@item
New commands:
@example
c-set-offset
c-set-style
c-fill-paragraph
c-forward-into-nomenclature
c-backward-into-nomenclature
c-scope-operator
c-beginning-of-statement
c-end-of-statement
c-up-conditional
c-backward-conditional
c-forward-conditional
c-show-semantic-information
@end example

@item
Other renamed commands/variables:
@example
c++-c-mode                    => c-mode
c++-C-block-comments-indent-p => c-block-comments-indent-p
c++-hanging-braces            => c-hanging-braces-alist
c++-hanging-member-init-colon => c-hanging-colons-alist
c++-default-macroize-column   => c-backslash-column
c++-macroize-region           => c-backslash-region
c++-electric-semi             => c-electric-semi&comma
@end example

@item
Obsolete variables/commands:
@example
c++-always-arglist-indent-p
c++-block-close-brace-offset
c++-paren-as-block-close-p
c++-continued-member-init-offset
c++-member-init-indent
c++-friend-offset
c++-access-specifier-offset
c++-empty-arglist-indent
c++-auto-hungry-initial-state
c++-auto-hungry-toggle
c++-relative-offset-p
c++-match-header-strongly
c++-beginning-of-defun
c++-end-of-defun
c++-insert-header
c++-match-paren
c++-forward-sexp
c++-backward-sexp
c++-comment-region
c++-uncomment-region
@end example

@end itemize

@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@node  Requirements, Limitations and known bugs, cc-mode.el vs. c++-mode.el 2.353, Top
@comment  node-name,              next,                    previous,up
@chapter  Requirements
@cindex   Requirements
@comment * Requirements
@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

@file{cc-mode.el} requires @file{reporter.el} for submission of bug reports.
@file{reporter.el} is distributed with the latest FSF and XEmacs
19's.  See @ref{reporter.el info} for Emacs Lisp Archive anonymous ftp'ing
instructions for those of you who are using older Emacsen.

@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@node  Limitations and known bugs, Electronic Mail, Requirements, Top
@comment  node-name,              next,                    previous,up
@chapter  Limitations and Known Bugs
@cindex   Limitations and Known Bugs
@comment * Limitations and Known Bugs
@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

@itemize @bullet
@item
Multi-line macros are not handled properly.

@item
Re-indenting large regions or expressions can be slow.

@item
Use with Emacs 18 can be slow and annoying. You should seriously
consider upgrading to Emacs 19.

@item
There is still some weird behavior when filling C block comments.
My suggestion is to check out add-on fill packages such as
@code{filladapt}, available at the elisp archive.

@end itemize

@node  Electronic Mail, reporter.el info, Limitations and known bugs, Top
@comment  node-name,              next,                    previous,up
@chapter  Electronic Mail
@cindex   Electronic Mail
@comment * Electronic Mail

To report bugs, use the @kbd{C-c C-b} (@code{c-submit-bug-report}) command.
This provides vital information I need to reproduce your problem.
Make sure you include a stripped down code example.

For other help or suggestions, send a message to
@code{cc-mode-help@@anthem.nlm.nih.gov}.

Send an add message to
@code{cc-mode-victims-request@@anthem.nlm.nih.gov}
to get on the beta testers list.  Note that this is a
fairly technical discussion list so you should be moderately Emacs
lisp fluent and have anonymous ftp access.

There is also an announce only list where you will get beta
version update diffs, but will not join in the technical
discussions.  You should still have anon-ftp, and you shouldn't
expect beta releases to be as stable as public releases.  Send an
add message to @code{cc-mode-announce-request@@anthem.nlm.nih.gov} to be
added to this list.

Please use these addresses instead of my personal address so I can
keep track of all the incoming mail!

@node  reporter.el info, User visible changes since 4.35, Electronic Mail, Top
@comment  node-name,              next,                    previous,up
@chapter  @file{reporter.el} info
@cindex   @file{reporter.el} info
@comment * Here's the Emacs Lisp Archive information for @file{reporter.el}:

@example

GNU Emacs Lisp Code Directory Apropos -- "reporter"
"~/" refers to archive.cis.ohio-state.edu:/pub/gnu/emacs/elisp-archive/

reporter (1.23)	      02-Feb-1993
     Barry A. Warsaw, <bwarsaw@@cen.com>
     ~/misc/reporter.el.Z
     Customizable bug reporting of lisp programs.

@end example

@c !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@node  User visible changes since 4.35, User visible changes since 3.349, reporter.el info, Top
@comment  node-name,              next,                    previous,up
@chapter  User visible changes since 4.35
@cindex   User visible changes since 4.35
@c !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

@itemize @bullet
@item
@code{c-set-offset} and related functions and variables can now accept
variable symbols.  Also @code{++} and @code{--} which mean @code{2*}
positive and negative @code{c-basic-offset} respectively.

@item
new variable, @code{c-recognize-knr-p}, which controls whether K&R C
contructs will be recognized.  Trying to recognize K&R constructs
is a time hog so if you're programming strictly in ANSI C, set this
variable to nil (it should already be nil in @code{c++-mode}).

@item
new variable, @code{c-hanging-comment-ender-p} for controlling
@code{c-fill-paragraph}'s behavior.

@item
new syntactic symbol: @code{statement-case-open}.  This is assigned to
lines containing an open brace just after a @code{case}/@code{default} label.

@item
new variable, @code{c-progress-interval}, which controls minibuffer update
message displays during long re-indention.  This is a new feature
which prints percentage complete messages at specified intervals.

@item
Better menu titles in FSF's Emacs.

@item
Improved @code{selective-display} compatibility.

@item
Bug fixes, bug fixes, bug fixes!

@item
Some performance enhancements, but nothing radically better.

@end itemize

@c !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@node  User visible changes since 3.349, User visible changes since 3.304, User visible changes since 4.35, Top
@comment  node-name,              next,                    previous,up
@chapter  User visible changes since 3.349
@cindex   User visible changes since 3.349
@c !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

@itemize @bullet
@item
New @code{major-mode}: @code{objc-mode} for Objective-C editing. Also added,
@code{objc-mode-hook}, @code{objc-mode-abbrev-table}, @code{objc-mode-map}, and
@code{objc-mode-syntax-table}.

@item
New syntactic symbols @code{objc-method-intro}, @code{objc-method-args}, and
@code{objc-method-call-cont} have been added, with appropriate offsets in
@code{c-offsets-alist}.

@item
Ellemtel style puts @code{substatement-open} braces on their own line.

@item
Better conformance to GNU coding style. New line up function set on
@code{arglist-close} for GNU style: @code{c-lineup-arglist-intro-after-paren}.

@item
Bracket lists are treated like paren lists (i.e. they are given the
appropriate @code{arglist-*} syntax).

@item
Some changes to recognition of @code{brace-list}s. When an otherwise
@code{brace-list-entry} or @code{brace-list-intro} is found to start
with an open brace, the line is given @code{brace-list-open} syntax instead.

@item
@code{brace-list-intro} and @code{brace-list-entry} are hangable via
@code{c-hanging-braces-alist}.

@item
@code{c-set-offset} provides a reasonable default in the prompt.

@item
Various name changes to commands and variables for consistency of
terminology.  The changes are:

@example
Cmd/Var   Old Name                       New Name
-------   --------                       --------
[var]     c-strict-semantics-p           c-strict-syntax-p
[var]     c-echo-semantic-information-p  c-echo-syntactic-information-p
[var]     c-semantics                    c-syntactic-context
[cmd]     c-show-syntactic-information   c-show-syntactic-information
@end example

Some other, non-user-level name changes were effected as well

@item
Usual gobs of bug fixes.

@end itemize

@c !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@node  User visible changes since 3.304, User visible changes since 3.229, User visible changes since 3.349, Top
@comment  node-name,              next,                    previous,up
@chapter  User visible changes since 3.304
@cindex   User visible changes since 3.304
@c !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

@itemize @bullet
@item
You can now specify `hanginess' of close braces. See
@code{c-hanging-braces-alist}.

@item
New syntactic symbol `@code{substatement-open}' to control indentation of
braces which open a substatement block (i.e. @code{if}, @code{for}, @dots{}).  
@kbd{C-c C-s} used to call these 
@code{((block-open . ??) (substatement . ??))}, but 
now they are just @code{((substatement-open . ??))}.  @emph{Warning:
this change may affect your current indentation settings}.

@item
@code{c-adaptive-block-open} lineup function is removed. Obsoleted by
@code{substatement-open} change above.

@item
New @emph{Default} style returns indentation variables to their default
values.

@item
Support for Lucid Emacs 19.10's @code{mode-popup-menu} convention.

@item
@code{c-macro-expand} command put on @kbd{C-c C-e}.

@item
New buffer-local variable @code{c-comment-start-regexp}. Useful for using
@code{cc-mode} as a basis for other C-like languages.

@item
@code{c++-mode} handles @code{try}/@code{catch} blocks.  Assigns them
`@code{substatement}' syntax similar to @code{if}, @code{for},
@code{while}, @dots{}

@item
@code{c-indent-via-language-element} renamed to @code{c-indent-line} for
@code{awk-mode}, BOCM compatibility.

@item
Usual gobs of bug fixes.

@end itemize

@c !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@node  User visible changes since 3.229, Dumping cc-mode 4.85, User visible changes since 3.304, Top
@comment  node-name,              next,                    previous,up
@chapter  User visible changes since 3.229
@cindex   User visible changes since 3.229
@c !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

@itemize @bullet
@item
Tons 'o performance enhancements.

@item
Tons 'o bug fixes.

@item
Improved support for nested structs in C.

@item
Emacs 18 support has been split out into a separate file,
@file{cc-mode-18.el}. Emacs 18 support is a losing battle, so after this
release, I am not going to actively maintain @code{cc-mode} for Emacs 18,
although I will incorporate contributed patches to @file{cc-mode-18.el}.

@item
The last of the dependencies on @file{c-mode.el} should be removed.

@item
New syntactic symbol, @code{defun-block-intro}, which controls the
indentation for the first line in a top-level function or class.

@item
@code{c-indent-defun} moved to @kbd{C-c C-q}.

@item
@code{c-scope-operator} moved to @kbd{C-c :}.

@item 
New coding style added to @code{c-style-alist}: Ellemtel.  This supports
the C++ coding style defined in @cite{Programming in C++, Rules and
Recommendations}, by Erik Nyquist and Mats Henricson, Ellemtel,
ftp'able from @code{euagate.eua.ericsson.se}.

@item
@code{c-set-style} now modifies the global values by default. Buffer local
versions are made when optional universal argument is given.

@item
New variable: @code{c-inhibit-startup-warnings-p}.

@item
New custom indentation functions, which are not used by default:
@code{c-lineup-math} and @code{c-lineup-runin-statements}.  The former lines up
math @code{statement-cont} lines after the equals sign.  The latter lines
up statement lines when the first statement in a block appears on
the same line as the block opening brace.

@end itemize


@c !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@node    Dumping cc-mode 4.85, Concept Index, User visible changes since 3.229, Top
@comment node-name,    next,  previous,      up
@chapter  Dumping @code{cc-mode} 4.85
@cindex   Dumping @code{cc-mode} 4.85
@c !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

For now, you're going to be kind of on your own, but here are my, and
other, experiences in dumping Emacs with @code{cc-mode}.  If you like
@file{cc-mode.el}, you should lobby RMS to adopt it as @emph{the}
@code{c-mode}, 
@code{c++-mode}, and @code{objc-mode} for FSF's Emacs.  Note that if
you are using 
XEmacs 19.11 (formerly Lucid Emacs), you do not need to do any of
this.  XEmacs comes with @code{cc-mode} already dumped.  Yay!

Do this:

@example
    % cd <wherever_c_mode.el_is>
    % mv c-mode.el c-mode.el.bak
    % mv cc-mode.el c-mode.el
@end example

Then @code{byte-compile} @file{c-mode.el} to produce @file{c-mode.elc}.

In both FSF 19.22 and Lucid 19.9 @file{version.el} is loaded too late in
the @file{loadup.el} file.  @file{cc-mode.el} depends on the value of
@code{emacs-version} so you need to move the load of @file{version.el}
higher up in the file. 

You may need to crank up @code{PURESIZE} in @file{src/pursize.h}.  I
found I had to add about 14k, others have reported an increase of about
23k, but of course YMMV.

Tell your users not to add the @code{f/makunbound}'s or @code{autoload}s to
their @file{.emacs} files, since they'll now get @code{cc-mode} for free.

In Lucid  19.9,   @file{loaddefs.el}  contains a  lot  of  automatically
generated autoload  definitions which will cause  warnings when it finds
pointers to  doc strings.  You  can either  ignore these  warnings (they
won't hurt      you),  or you    can comment   out   the   autoloads for
@code{c++-mode} and @code{c-style}.  Or you can regenerate the automatic
autoloads  once  you've  moved @file{c++-mode.el}   and @file{c-mode.el}
aside, but you'll have to figure this part out by yourself.

I've also been told that under FSF Emacs 19, you  have to get rid of the
autoloads   for  @file{cplus-md*.el} since  @file{c++-mode.el} has  been
renamed. You should also do  an @code{update-directory-autoloads} on the
lisp directory before you redump.


Andrew Hall @code{<fmrco!ahall@@uunet.uu.net>} provides this diff which
applies to FSF's Emacs 19.25.90 @file{loaddefs.el} file.  This zaps the
autoloads for @file{cplus-md.el} and @file{c-mode.el} so you shouldn't
need to do an @code{update-directory-autoloads}.

@example
*** loaddefs.el.orig	Sat Jul  2 15:39:30 1994
--- loaddefs.el	Thu Jul 21 12:23:22 1994
***************
*** 1959,2035 ****
  
  ;;;***
  
- ;;;### (autoloads (c++-mode) "cplus-md" "cplus-md.el" (11649 1462))
- ;;; Generated autoloads from cplus-md.el
- 
- (autoload (quote c++-mode) "cplus-md" "\
- Major mode for editing C++ code.  Very much like editing C code.
- Expression and list commands understand all C++ brackets.
- Tab at left margin indents for C++ code
- Comments are delimited with /* ... */ @{or with // ... <newline>@}
- Paragraphs are separated by blank lines only.
- Delete converts tabs to spaces as it moves back.
- \\@{c++-mode-map@}
- Variables controlling indentation style:
-  c-tab-always-indent
-     Non-nil means TAB in C mode should always reindent the current line,
-     regardless of where in the line point is when the TAB command is used.
-     Default is t.
-  c-auto-newline
-     Non-nil means automatically newline before and after braces,
-     and after colons and semicolons, inserted in C code.
-  c-indent-level
-     Indentation of C statements within surrounding block.
-     The surrounding block's indentation is the indentation
-     of the line on which the open-brace appears.
-  c-continued-statement-offset
-     Extra indentation given to a substatement, such as the
-     then-clause of an if or body of a while.
-  c-continued-brace-offset
-     Extra indentation given to a brace that starts a substatement.
-     This is in addition to c-continued-statement-offset.
-  c-brace-offset
-     Extra indentation for line if it starts with an open brace.
-  c-brace-imaginary-offset
-     An open brace following other text is treated as if it were
-     this far to the right of the start of its line.
-  c-argdecl-indent
-     Indentation level of declarations of C function arguments.
-  c-label-offset
-     Extra indentation for line that is a label, or case or ``default:'', or
-     ``public:'' or ``private:'', or ``protected:''.
-  c++-electric-colon
-     If non-nil at invocation of c++-mode (t is the default) colon electricly
-     indents.
-  c++-empty-arglist-indent
-     If non-nil, a function declaration or invocation which ends a line with a
-     left paren is indented this many extra spaces, instead of flush with the
-     left paren.
-  c++-friend-offset
-     Offset of C++ friend declarations relative to member declarations.
-  c++-member-init-indent
-     Indentation level of member initializations in function declarations,
-     if they are on a separate line beginning with a colon.
-  c++-continued-member-init-offset
-     Extra indentation for continuation lines of member initializations; NIL
-     means to align with previous initializations rather than with the colon.
- 
- Settings for K&R, BSD, and Stroustrup indentation styles are
-   c-indent-level                5    8    4
-   c-continued-statement-offset  5    8    4
-   c-continued-brace-offset                0
-   c-brace-offset               -5   -8    0
-   c-brace-imaginary-offset                0
-   c-argdecl-indent              0    8    4
-   c-label-offset               -5   -8   -4
-   c++-empty-arglist-indent                4
-   c++-friend-offset                       0
- 
- Turning on C++ mode calls the value of the variable `c++-mode-hook' with
- no args if that value is non-nil." t nil)
- 
- ;;;***
- 
  ;;;### (autoloads (dabbrev-expand) "dabbrev" "dabbrev.el" (11577 36858))
  ;;; Generated autoloads from dabbrev.el
  
--- 1959,1964 ----
@end example

@c !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@node    Concept Index,    ,  Dumping cc-mode 4.85, Top
@comment node-name,    next,  previous,      up
@unnumbered Concept Index
@c !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

@printindex cp
@contents
@bye
