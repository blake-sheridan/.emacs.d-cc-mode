\input texinfo   @c -*- texinfo -*-

@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@comment %**start of header (This is for running Texinfo on a region)
@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

@setfilename  cc-mode.info
@settitle     CC-MODE Version 4 Documentation
@footnotestyle end

@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@comment @setchapternewpage odd !! we don't want blank pages !!
@comment %**end of header (This is for running Texinfo on a region)
@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@comment 
@comment texinfo manual for @file{cc-mode.el} version 4
@comment manual version: $Revision: 2.6 $
@comment generated from the original README file by Krishna Padmasola
@comment <krishna@earth-gw.njit.edu>
@comment 
@comment Barry A. Warsaw <bwarsaw@cnri.reston.va.us>
@comment Last modification: $Date: 1995-03-10 00:39:16 $
@comment 
@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@comment The following line inserts the copyright notice 
@comment into the Info file.
@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

@ifinfo
Copyright @copyright{} 1995 Free Software Foundation, Inc.
@end ifinfo

@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@comment !!!The titlepage section does not appear in the Info file.!!!
@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

@titlepage
@sp 10


@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@comment The title is printed in a large font.
@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

@center @titlefont{CC-MODE Version 4}
@sp 2
@center A GNU Emacs mode for editing C, C++, and Objective-C code.
@sp 2
@center Barry A. Warsaw
@center @code{bwarsaw@@cnri.reston.va.us}


@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@comment  The following two commands start the copyright page
@comment  for the printed manual.  This will not appear in the Info file.
@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

@page
@vskip 0pt plus 1filll
Copyright @copyright{} 1995 Free Software Foundation, Inc.
@end titlepage


@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@comment The Top node contains the master menu for the Info file.
@comment This appears only in the Info file, not the printed manual.
@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

@node    Top,       Introduction, (dir),    (dir)
@comment node-name, next,          previous, up


@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

@menu
* Introduction::                
* Getting Connected::           
* New Indentation Engine::
* Customizing Indentation::
* Syntactic Symbols::
* Frequently Asked Questions::
* Sample .emacs File::
* Requirements::                
* Limitations and Known Bugs::  
* Mailing Lists and Submitting Bug Reports::  
* reporter.el Info::            
* Dumping cc-mode 4.155::       Dumping @code{cc-mode} 4.155
* Concept Index::               
* Command Index::               Command Index
* Key Index::                   Key Index
* Variable Index::              Variable Index
@end menu

@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

@node     Introduction, Getting Connected, Top,      Top
@comment  node-name,    next,            previous, up
@chapter  Introduction
@cindex   Introduction

Welcome to @code{cc-mode}, version 4.  This is an Emacs Lisp mode for
editing files containing C, C++, and Objective-C code in GNU Emacs.
This incarnation of the mode is descendant from @file{c-mode.el} (also
called "Boring Old C Mode" or BOCM @code{:-)}, and @file{c++-mode.el}
version 2, which I have been maintaining since 1992.  @code{cc-mode}
represents a significant milestone in the mode's life.  It has been
fully merged back with Emacs 19's @file{c-mode.el}. Also a new, more
intuitive and flexible mechanism for controlling indentation has been
developed.

@code{cc-mode} version 4 supports the editing of K&R and ANSI C, most
ARM C++, and Objective-C files, using the same customization mechanisms
across all modes.  In this way, you can easily set up your preferred
coding styles for consistent use in editing all C, C++, and Objective-C
programs.

This manual will describe the following:

@itemize @bullet
@item
How to get started using @code{cc-mode}.

@item
How to customize the new indentation engine.

@item
The differences between @file{cc-mode.el} and BOCM @file{c-mode.el}.

@item
The differences between @file{cc-mode.el} and @file{c++-mode.el}.
@end itemize

Note that the name of this file is @file{cc-mode.el}, and I'll often
refer to the package as @code{cc-mode}, but there really is no top level
@code{cc-mode} entry point.  I call it @code{cc-mode} simply to
differentiate it from @file{c-mode.el}.  All of the variables, commands,
and functions in @code{cc-mode} are prefixed with @code{c-<thing>}, and
@code{c-mode}, @code{c++-mode}, and @code{objc-mode} entry points are
provided.  This file is intended to be a replacement for
@file{c-mode.el} and @file{c++-mode.el} -- you should be able to remove
them and dump Emacs with @file{cc-mode.el} instead. See @ref{Dumping
cc-mode 4.155} for details on how to do this.

The major version number was incremented to 4 with the addition of
@code{objc-mode}. This distribution contains release 4.155 of
@code{cc-mode}.  This release will be the last for major release version
4.  Work has already begun on version 5, which will not support use of
Emacs 18.

XEmacs 19.11 (formerly Lucid Emacs) is distributed with
@file{cc-mode.el} 4.85 dumped in the executable.  It has completely
replaced @file{c-mode.el} and @file{c++-mode.el}.  If you have XEmacs
19.11 you should upgrade your @file{cc-mode.el} to version 4.155.
XEmacs 19.12 will be distributed with @file{cc-mode.el} version 4.155.

Both XEmacs and this distribution also contain a new file called
@file{cc-compat.el} which should ease your transition from BOCM to
@code{cc-mode}.  It currently comes unguaranteed and unsupported.
@file{cc-compat.el} will be fully merged into @code{cc-mode} version 5.

A special word of thanks goes to Krishna Padmasola for his work in
bringing this manual to you.  @code{cc-mode} users have been clamoring
for a manual for a long time, and thanks to Krishna, it is now
available <clap> <clap> <clap>! @code{:-)}


@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

@node     Getting Connected, New Indentation Engine, Introduction,      Top
@comment  node-name,       next,                   previous,          up
@chapter  Getting Connected
@cindex   Getting Connected

@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

@file{cc-mode.el} works well with the 2 main branches of Emacs 19:
XEmacs and the Emacs 19 maintained by the FSF.  FSF's Emacs 19 users
will want to use Emacs version 19.21 or better, XEmacs users will want
19.6 or better.  Earlier versions of these Emacsen have deficiencies
and/or bugs which will adversely affect the performance and usability of
@code{cc-mode}.

Similarly if you use the @file{cc-mode-18.el} compatibility file,
@file{cc-mode.el} will work with Emacs 18, but only moderately well.  A
word of warning though, @emph{Emacs 18 lacks some fundamental
functionality and that ultimately means using Emacs 18 is a losing
battle}.  Hence @code{cc-mode} under Emacs 18 is no longer supported and
it is highly recommended that you upgrade to Emacs 19.  If you use
@code{cc-mode} under Emacs 18, you're on your own.  With @code{cc-mode}
version 5, Emacs 18 support will be dropped altogether.

Note that XEmacs 19.12 already comes with @code{cc-mode} version 4.155
preconfigured for your use.  You should be able to safely skip the rest
of the setup information in this chapter.  XEmacs 19.11 ships with
@code{cc-mode} version 4.85, so those users will want to continue
reading to learn how to upgrade to version 4.155.

@cindex .emacs file
The first thing you will want to do is put @file{cc-mode.el} somewhere
on your @code{load-path} so Emacs can find it.  Do a @kbd{C-h v
load-path RET} to see all the directories Emacs looks at when loading a
file.  If none of these directories are appropriate, create a new
directory and add it to your @code{load-path}:

@noindent
@emph{[in the shell]}

@example
@group
% cd
% mkdir mylisp
% mv cc-mode.el mylisp
% cd mylisp
@end group
@end example

@noindent
@emph{[in your .emacs file add]}

@example
(setq load-path (cons "~/mylisp" load-path))
@end example

@cindex byte compile
Next you want to @dfn{byte compile} @file{cc-mode.el}.  The mode uses a
lot of macros so if you don't byte compile it, things will be unbearably
slow.  @emph{You can ignore all byte-compiler warnings!}  They are the
result of the supporting different versions of Emacs, and none of the
warnings have any effect on operation. Let me say this again:
@strong{You really can ignore all byte-compiler warnings!}

Here's what to do to byte-compile the file [in emacs]:

@example
M-x byte-compile-file RET ~/mylisp/cc-mode.el RET
@end example

If you are running XEmacs 19.11, you can simply add the following to
your @file{.emacs} file in order to upgrade to the latest version of
@code{cc-mode}:

@example
(load "cc-mode")
@end example

Users of FSF's Emacs 19, Emacs 18, or of the older Lucid Emacs will
probably be running an Emacs that has BOCM @file{c-mode.el} pre-dumped.
You will not want to use this, or any older releases of
@file{c++-mode.el} if you use @file{cc-mode.el}.  If your Emacs is
dumped with either of these files you first need to make Emacs
``forget'' about those older modes.

If you can do a @kbd{C-h v c-mode-map} you probably need to add these
lines at the top of your @file{.emacs} file:

@example
@group
(fmakunbound 'c-mode)
(makunbound  'c-mode-map)
(fmakunbound 'c++-mode)
(makunbound  'c++-mode-map)
(makunbound  'c-style-alist)
@end group
@end example

After those lines you will want to add the following autoloads to your
@file{.emacs} file so that @code{cc-mode} gets loaded at the right time:

@example
@group
(autoload 'c++-mode  "cc-mode" "C++ Editing Mode" t)
(autoload 'c-mode    "cc-mode" "C Editing Mode" t)
(autoload 'objc-mode "cc-mode" "Objective-C Editing Mode" t)
@end group
@end example

Alternatively, if you want to make sure cc-mode is loaded when Emacs
starts up, you could use this line instead of the three autoloads above:

@example
(require 'cc-mode)
@end example

Next, you will want to set up Emacs so that it edits C files in
@code{c-mode}, C++ files in @code{c++-mode}, and Objective-C files in
@code{objc-mode}. All users should add the following to their
@file{.emacs} file.  Note that this assumes you'll be editing @code{.h}
and @code{.c} files as C, @code{.hh}, @code{.cc}, @code{.H}, and
@code{.C} files as C++, and @code{.m} files as Objective-C. Your mileage
may vary:

@example
@group
(setq auto-mode-alist
  (append
    '(("\\.C$"  . c++-mode)
      ("\\.H$"  . c++-mode)
      ("\\.cc$" . c++-mode)
      ("\\.hh$" . c++-mode)
      ("\\.c$"  . c-mode)
      ("\\.h$"  . c-mode)
      ("\\.m$"  . objc-mode)
     ) auto-mode-alist))
@end group
@end example

You may already have some or all of these settings on your
@code{auto-mode-alist}, but it won't hurt to put them on there again.

@kindex C-c C-v
That's all you need -- I know, I know, it sounds like a lot @code{:-)},
but after you've done all this, you should only need to quit and restart
Emacs.  The next time you visit a C, C++, or Objective-C file you should
be using @code{cc-mode}.  You can check this easily by hitting @kbd{C-c
C-v} in the @code{c-mode}, @code{c++-mode}, or @code{objc-mode} buffer.
You should see this message in the echo area:

@example
Using @code{cc-mode} version 4.155
@end example

@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

@menu
* Step 1 -- Syntactic Analysis::  Step 1 -- Syntactic Analysis
* Step 2 -- Indentation Calculation::  Step 2 -- Indentation Calculation
@end menu

@node     New Indentation Engine, Customizing Indentation, Getting Connected, Top
@comment  node-name,              next,                    previous,up

@chapter  New Indentation Engine
@cindex   New Indentation Engine

@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

@code{cc-mode} has a new indentation engine, providing a simplified, yet
flexible and general mechanism for customizing indentation. It breaks
indentation calculation into two steps. First for the line of code being
indented, @code{cc-mode} analyzes what kind of language construct it's
looking at, then it applies user defined offsets to the current line
based on this analysis.

This section will briefly cover how indentation is calculated in
@code{cc-mode}. It is important to understand the indentation model
being used so that you will know how to customize @code{cc-mode} for
your personal coding style.

@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@menu
* Step 1 -- Syntactic Analysis::
* Step 2 -- Indentation Calculation::
@end menu
@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@node  Step 1 -- Syntactic Analysis, Step 2 -- Indentation Calculation, , New Indentation Engine
@comment  node-name,              next,                    previous,up
@section  Step 1 -- Syntactic Analysis
@cindex   Step 1 -- Syntactic Analysis
@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

@vindex c-offsets-alist
@vindex offsets-alist (c-)
@cindex relative buffer position
@cindex syntactic symbol
@cindex syntactic component
@cindex syntactic component list
@cindex relative buffer position
The first thing @code{cc-mode} does when indenting a line of code, is to
analyze the line, determining the @dfn{syntactic component list} of the
construct on that line.  A @dfn{syntactic component} consists of a pair
of information (in lisp parlance, a @emph{cons cell}), where the first
part is a @dfn{syntactic symbol}, and the second part is a @dfn{relative
buffer position}.  Syntactic symbols describe elements of C @footnote{or
C++, or Objective-C code.  In general, for the rest of this manual I
will use the term ``C code'' to refer to all the C-like dialects, unless
otherwise explicitly noted.} code, e.g. @code{statement},
@code{substatement}, @code{class-open}, @code{class-close}, etc.  See
@ref{Syntactic Symbols} for a complete list of currently recognized
syntactic symbols and their semantics.  Also, the variable
@code{c-offsets-alist} contains the list of currently supported
syntactic symbols.

Conceptually, a line of C code is always indented relative to the
indentation of some line higher up in the buffer.  This is represented
by the relative buffer position in the syntactic component.

It might help to see an example. Suppose we had the following code as
the only thing in a @code{c++-mode} buffer @footnote{The line numbers
don't actually appear in the buffer}:

@example
@group
  Example 1:

    1: void swap( int& a, int& b )
    2: @{
    3:     int tmp = a;
    4:     a = b;
    5:     b = tmp;
    6: @}
@end group
@end example

@kindex C-c C-s
@findex c-show-syntactic-information
@findex show-syntactic-information (c-)
We can use the command @kbd{C-c C-s}
(@code{c-show-syntactic-information}) to simply report what the
syntactic analysis is for a line.  Running this command on line 4 of
example 1, we'd see in the echo area:

@example
((statement . 35))
@end example

This tells us that the line is a statement and it is indented relative
to buffer position 35, which happens to be the @samp{i} in @code{int} on
line 3.  If you were to move point to line 3 and hit @kbd{C-c C-s}, you
would see:

@example
((defun-block-intro . 29))
@end example

This indicates that the @samp{int} line is the first statement in a
block, and is indented relative to buffer position 29, which is the
brace just after the function header.

Here's another example:
@example 
@group
  Example 2:

    1: int add( int val, int incr, int doit )
    2: @{
    3:     if( doit )
    4:         @{
    5:             return( val + incr );
    6:         @}
    7:     return( val );
    8: @}
@end group
@end example

Hitting @kbd{C-c C-s} on line 4 gives us:

@example
((substatement-open . 46))
@end example

@cindex substatement
@cindex substatment block
@noindent
which tells us that this is a brace that @emph{opens} a substatement
block. @footnote{A @dfn{substatement} indicates the line after an
@code{if}, @code{else}, @code{while}, @code{do}, @code{switch}, or
@code{for} statement, and a @dfn{substatement block} is a brace block
following one of those constructs.}

@cindex comment only line
Syntactic component lists can contain more than one component, and
individual syntactic compenents need not have relative buffer positions.
The most common example of this is a line that contains a @dfn{comment
only line}.

@example
@group
  Example 3:

1: void draw_list( List<Drawables>& drawables )
2: @{
3:         // call the virtual draw() method on each element in list
4:     for( int i=0; i < drawables.count(), i++ )
5:     @{
6:         drawables[i].draw();
7:     @}
8: @}
@end group
@end example

Hitting @kbd{C-c C-s} on line 3 of example 3 gives us:

@example
((comment-intro) (defun-block-intro . 46))
@end example

@noindent
so you can see that the syntactic component list contains two syntactic
components.  Also notice that the first component,
@samp{(comment-intro)} has no relative buffer position.


@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@node  Step 2 -- Indentation Calculation, , Step 1 -- Syntactic Analysis, New Indentation Engine
@comment  node-name,              next,                    previous,up
@section  Step 2 -- Indentation Calculation
@cindex   Step 2 -- Indentation Calculation
@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

@vindex c-offsets-alist
@vindex offsets-alist (c-)
Indentation for the current line is calculated using the syntactic
component list derived in step 1 above (see @ref{Step 1 -- Syntactic
Analysis}).  Each component contributes to the final total indentation
of the line in two ways.

First, the syntactic symbols are looked up in the @code{c-offsets-alist}
variable, which is an association list of syntactic symbols and the
offsets to apply for those symbols.  This offset is added to the running
total.

Second, if the component has a relative buffer position, @code{cc-mode}
adds the column number of that position to the running total.  By adding
up the offsets and columns for every syntactic component on the list,
the final total indentation for the current line is computed.

Let's use our two code examples above to see how this works.  Here is
our example again.

@example
@group
  Example 1:

    1: void swap( int& a, int& b )
    2: @{
    3:     int tmp = a;
    4:     a = b;
    5:     b = tmp;
    6: @}
@end group
@end example

@kindex TAB
Lets say point is on line 3 and we hit the @key{TAB} key to re-indent
the line.  Remember that the syntactic component list for that
line is:

@example
((defun-block-intro . 29))
@end example

@code{cc-mode} looks up @code{defun-block-intro} in the
@code{c-offsets-alist} variable.  Let's say it find the value @samp{4};
it adds this to the running total (initialized to zero), yielding a
running total indentation of 4 spaces.

Next @code{cc-mode} goes to buffer position 29 and asks for the current
column.  Since the brace at buffer position 29 is in column zero, it
adds @samp{0} to the running total.  Because there is only one syntactic
component on the list for this line, the total indentation for the line
is 4 spaces.

@example
@group
  Example 2:

    1: int add( int val, int incr, int doit )
    2: @{
    3:     if( doit )
    4:         @{
    5:             return( val + incr );
    6:         @}
    7:     return( val );
    8: @}
@end group
@end example

If we were to hit @kbd{TAB} on line 4 in example 2 above, the same basic
process is performed, despite the differences in the syntactic component
list.  Remember that the list for this line is:

@example
((substatement-open . 46))
@end example

Here, @code{cc-mode} first looks up the @code{substatement-open} symbol
in @code{c-offsets-alist}, for which it might find @samp{4}, yielding a
running total of 4 (0 + 4 = 4).  @code{cc-mode} then goes to buffer
position 46, which is the @samp{i} in @code{if} on line 3.  This
character is in the fourth column on that line so adding this to the
running total yields an indentation for the line of 8 spaces.

Simple, huh?

Actually, the mode usually just does The Right Thing without you having
to think about it in this much detail.  But when customizing
indentation, it's essential to understand the general indentation model
being used.

@vindex c-echo-syntactic-information-p
@vindex echo-syntactic-information-p (c-)
@cindex TAB
When re-indenting a particular line by hitting @kbd{TAB}, you can
configure @code{cc-mode} to echo the syntactic component list and
indentation calculation by setting the variable
@code{c-echo-syntactic-information-p} to non-@code{nil}.


@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@node     Customizing Indentation, Syntactic Symbols, New Indentation Engine, Top
@comment  node-name,              next,                    previous,up

@chapter  Customizing Indentation
@cindex   Customizing Indentation
@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

@menu
* Interactive Customization::
* Permanent Customization::
* Styles::
* Advanced Customizations::
@end menu

@cindex c-set-offset
@cindex set-offset (c-)
The @code{c-offsets-alist} variable is where you customize all your
indentations.  You simply need to decide what additional offset you want
to add for every syntactic symbol.  You can use the command @kbd{C-c
C-o} (@code{c-set-offset}) as the way to set offsets, both interactively
and from your mode hook.  Also, you can set up @emph{styles} of
indentation just like in BOCM @file{c-mode.el}.  Most likely, you'll
find one of the pre-defined styles will suit your needs, but if not,
this section will describe how to set up basic editing configurations.

@cindex c-basic-offset
@cindex basic-offset (c-)
As mentioned previously, the variable @code{c-offsets-alist} is an
association list between syntactic symbols and the offsets to be applied
to those symbols.  In fact, these offset values can be an integer, a
function or variable name, or one of the following symbols: @code{+},
@code{-}, @code{++}, or @code{--}, indicating positive or negative
multiples of the variable @code{c-basic-offset}.  Thus, because most
offsets are defined in terms of @code{+}, @code{-}, and @code{0}, if you
like the general indentation levels, but you use 2 spaces instead of 4
spaces per level, you can probably achieve your style by just changing
@code{c-basic-offset} like so (in your @file{.emacs} file):

@example
(setq c-basic-offset 2)
@end example

This would change

@example
@group
int add( int val, int incr, int doit )
@{
    if( doit )
        @{
            return( val + incr );
        @}
    return( val );
@}
@end group
@end example

@noindent
to

@example
@group
int add( int val, int incr, int doit )
@{
  if( doit )
    @{
      return( val + incr );
    @}
  return( val );
@}
@end group
@end example


To change indentation styles more radically, you will want to change the
value associated with various syntactic symbols in the
@code{c-offsets-alist} variable.  First, I'll show you how to do that
interactively, then I'll describe how to make changes to your
@file{.emacs} file so that your changes are more permanent.

@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@node     Interactive Customization, Permanent Customization, , Customizing Indentation
@comment  node-name,              next,                    previous,up

@section  Customizing Indentation
@cindex   Customizing Indentation
@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

As an example of how to customize indentation, let's change the
style of example 2 above from:

@example
@group
    1: int add( int val, int incr, int doit )
    2: @{
    3:     if( doit )
    4:         @{
    5:             return( val + incr );
    6:         @}
    7:     return( val );
    8: @}
@end group
@end example

    to:

@example
@group
    1: int add( int val, int incr, int doit )
    2: @{
    3:     if( doit )
    4:     @{
    5:         return( val + incr );
    6:     @}
    7:     return( val );
    8: @}
@end group
@end example

The construct we want to change the indentation of starts on line 4.  So
we first want to see the syntactic component list for that line.
Hitting @kbd{C-c C-s} yields:

@example
((substatement-open . 46))
@end example

@findex c-set-offset
@findex set-offset (c-)
@kindex C-c C-o
@noindent
so we know want to change the indentation for the
@code{substatement-open} syntactic symbol.  To do this interactively,
just hit @kbd{C-c C-o} (@code{c-set-offset}).  This prompts you for the
syntactic symbol to change, providing a reasonable default.  In this
case, the default is @code{substatement-open}, which is just the
syntactic symbol we want to change!

After you hit return, @code{cc-mode} will then prompt you for the new
offset value, with the old value as the default.  The default in this
case is @samp{+}, so hit backspace to delete the @samp{+}, then hit
@samp{0} and @kbd{RET}.  This will associate the offset 0 with the
syntactic symbol @code{substatement-open} in the @code{c-offsets-alist}
variable.

@findex c-indent-defun
@findex indent-defun (c-)
@kindex C-c C-q
To check your changes quickly, just hit @kbd{C-c C-q}
(@code{c-indent-defun}) to reindent the entire function.  The example
should now look like:

@example
@group
int add( int val, int incr, int doit )
@{
    if( doit )
    @{
        return( val + incr );
    @}
    return( val );
@}
@end group
@end example

@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@node     Permanent Customization, Styles, Interactive Customization, Customizing Indentation
@comment  node-name,              next,                    previous,up

@section  Permanent Indentation
@cindex   Permanent Indentation
@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

@vindex c-mode-common-hook
@vindex c-mode-hook
@vindex c++-mode-hook
@vindex objc-mode-hook
@cindex hooks
To make this change permanent, you need to add some lisp code to your
@file{.emacs} file.  The best place to make the change is in your
@code{c-mode-common-hook}.  As you know, every major mode in Emacs
should provide a @dfn{hook} variable, which is where you can add lisp to
customize the mode.  Because @code{cc-mode} provides three very similar
modes (e.g. @code{c-mode}, @code{c++-mode}, and @code{objc-mode}), it
makes sense to provide a hook that can be used to customize all three
modes in a consistent manner.  @code{c-mode-common-hook} is this
variable, and it always gets run @emph{before} the appropriate
@code{c-mode-hook}, @code{c++-mode-hook}, or @code{objc-mode-hook}.

Here's a simplified example of what you can add to your @file{.emacs}
file to make the changes described above more permanent.  See the Emacs
manuals for more information on customizing Emacs via hooks.  See
@ref{Sample .emacs File} for a more complete sample @file{.emacs} file.
@footnote{The use of @code{add-hook} in this example only works for
Emacs 19.  There is a solution for Emacs 18 users, but this just points
out another reason for you to upgrade to Emacs 19.}

@example
@group
(defun my-c-mode-common-hook ()
  ;; my customizations for all of c-mode, c++-mode, and objc-mode
  (c-set-offset 'substatement-open 0)
  ;; other customizations can go here
  )
(add-hook 'c-mode-common-hook 'my-c-mode-common-hook)
@end group
@end example

For complex customizations, you will probably want to set up a
@emph{style} that groups all your customizations under a single
name. See @ref{Styles} for details.

The offset value can also be a function, and this is how power users
gain enormous flexibility in customizing indentation, see @ref{Advanced
Customizations}.

@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@node     Styles, Advanced Customizations, Permanent Customization, Customizing Indentation
@comment  node-name,              next,                    previous,up

@section  Styles
@cindex   Styles
@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

[blah blah about styles]


@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@node     Advanced Customizations, , Styles, Customizing Indentation
@comment  node-name,              next,                    previous,up

@section  Advanced Customizations
@cindex   Advanced Customizations
@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

[blah blah about advanced customizations]


@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@node  Syntactic Symbols, Frequently Asked Questions, Customizing Indentation, Top
@comment  node-name,              next,                    previous,up

@chapter  Syntactic Symbols
@cindex   Syntactic Symbols
@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

[list of syntactic symbols]


@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@node  Frequently Asked Questions, Sample .emacs File, Syntactic Symbols, Top
@comment  node-name,              next,                    previous,up

@chapter  Frequently Asked Questions
@cindex   Frequently Asked Questions
@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

@kindex C-x h
@kindex ESC C-\
@kindex ESC C-x
@kindex C-c C-q
@kindex ESC C-q
@kindex ESC C-u
@kindex RET
@kindex LFD
@findex newline-and-indent
@quotation

    @strong{Q.} @emph{How do I re-indent the whole file?}

    @strong{A.} Visit the file and hit @kbd{C-x h} to mark the whole
    buffer. Then hit @kbd{@key{ESC} C-\}.
@sp 2

    @strong{Q.} @emph{How do I re-indent the entire function?
    @kbd{@key{ESC} C-x} doesn't work.}

    @strong{A.} @kbd{@key{ESC} C-x} is reserved for future Emacs use.
    To re-indent the entire function hit @kbd{C-c C-q}.
@sp 2

    @strong{Q.} @emph{How do I re-indent the current block?}

    @strong{A.} First move to the brace which opens the block with
    @kbd{@key{ESC} C-u}, then re-indent that expression with
    @kbd{@key{ESC} C-q}.
@sp 2

    @strong{Q.} @emph{Why doesn't the @key{RET} key indent the line to
    where the new text should go after inserting the newline?}

    @strong{A.} Emacs' convention is that @key{RET} just adds a new
    line, and that @key{LFD} adds a newline and indents it.  You can
    make @key{RET} do this too by adding this to your
    @code{c-mode-common-hook} (see the sample @file{.emacs} file
    @ref{Sample .emacs File}):

@example
       (define-key c-mode-map "\C-m" 'newline-and-indent)
@end example

       This is a very common question. @code{:-)} If you want this to be the
       default behavior, don't lobby me, lobby RMS!
@sp 2

    @strong{Q.} @emph{I put @code{(c-set-offset 'substatement-open 0)}
    in my @file{.emacs} file but I get an error saying that
    @code{c-set-offset}'s function definition is void.}

    @strong{A.} Since @code{cc-mode} is autoloaded, it is typically not
    loaded into your Emacs session by the time of the
    @code{c-set-offset} call. Instead of putting this in your top-level
    @file{.emacs} file, put the call to @code{c-set-offset} in your
    @code{c-mode-common-hook}, or simply add the following to the top of
    your @file{.emacs} file:

@example
(require 'cc-mode)
@end example

    See the sample @file{.emacs} file @ref{Sample .emacs File} for
    details.

@end quotation


@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@node  Sample .emacs File, Requirements, Frequently Asked Questions, Top
@comment  node-name,              next,                    previous,up

@chapter  Sample @file{.emacs} file
@cindex   Sample @file{.emacs} file
@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

@example
;; Sample .emacs file

;; Here's a sample .emacs file that might help you along the way.  Just
;; copy this region and paste it into your .emacs file.  You may want to
;; change some of the actual values.

(defconst my-c-style
  '((c-tab-always-indent           . t)
    (c-comment-only-line-offset    . 4)
    (c-hanging-braces-alist        . ((substatement-open after)
                                      (brace-list-open)))
    (c-hanging-colons-alist        . ((member-init-intro before)
                                      (inher-intro)
                                      (case-label after)
                                      (label after)
                                      (access-label after)))
    (c-cleanup-list                . (scope-operator
                                      empty-defun-braces
                                      defun-close-semi))
    (c-offsets-alist               . ((arglist-close     . c-lineup-arglist)
                                      (substatement-open . 0)
                                      (case-label        . 4)
                                      (block-open        . 0)
                                      (knr-argdecl-intro . -)))
    (c-echo-syntactic-information-p . t)
    )
  "My C Programming Style")

;; Customizations for all of c-mode, c++-mode, and objc-mode
(defun my-c-mode-common-hook ()
  ;; add my personal style and set it for the current buffer
  (c-add-style "PERSONAL" my-c-style t)
  ;; offset customizations not in my-c-style
  (c-set-offset 'member-init-intro '++)
  ;; other customizations
  (setq tab-width 8
        ;; this will make sure spaces are used instead of tabs
        indent-tabs-mode nil)
  ;; we like auto-newline and hungry-delete
  (c-toggle-auto-hungry-state 1)
  ;; keybindings for C, C++, and Objective-C.  We can put these in
  ;; c-mode-map because c++-mode-map and objc-mode-map inherit it
  (define-key c-mode-map "\C-m" 'newline-and-indent)
  )

;; the following only works in Emacs 19
;; Emacs 18ers can use (setq c-mode-common-hook 'my-c-mode-common-hook)
(add-hook 'c-mode-common-hook 'my-c-mode-common-hook)
@end example

@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@node  Requirements, Limitations and Known Bugs, Sample .emacs File, Top
@comment  node-name,              next,                    previous,up
@chapter  Requirements
@cindex   Requirements
@comment * Requirements
@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

@cindex reporter.el
@file{cc-mode.el} requires @file{reporter.el} for submission of bug
reports.  @file{reporter.el} is distributed with the latest FSF and
XEmacs 19's.  Here is the Emacs Lisp Archive anonymous ftp'ing
record for those of you who are using older Emacsen.

@comment * Here's the Emacs Lisp Archive information for @file{reporter.el}:

@example
         GNU Emacs Lisp Code Directory Apropos -- "reporter"
"~/" refers to archive.cis.ohio-state.edu:/pub/gnu/emacs/elisp-archive/

reporter (2.12)       06-Jul-1994
     Barry A. Warsaw, <bwarsaw@cen.com>
     ~/misc/reporter.el.Z
     Customizable bug reporting of lisp programs.
@end example

@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@node  Limitations and Known Bugs, Mailing Lists and Submitting Bug Reports, Requirements, Top
@comment  node-name,              next,                    previous,up
@chapter  Limitations and Known Bugs
@cindex   Limitations and Known Bugs
@comment * Limitations and Known Bugs
@comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

@itemize @bullet
@item
Multi-line macros are not handled properly.

@item
Re-indenting large regions or expressions can be slow.

@item
Use with Emacs 18 can be slow and annoying. You should seriously
consider upgrading to Emacs 19.

@item
There is still some weird behavior when filling C block comments.
My suggestion is to check out add-on fill packages such as
@code{filladapt}, available at the elisp archive.

@end itemize

@node  Mailing Lists and Submitting Bug Reports, Dumping cc-mode 4.155, Limitations and Known Bugs, Top
@comment  node-name,              next,                    previous,up
@chapter  Mailing Lists and Submitting Bug Reports
@cindex   Mailing Lists and Submitting Bug Reports
@comment * Mailing Lists and Submitting Bug Reports

@kindex C-c C-b
@findex c-submit-bug-report
@findex submit-bug-report (c-)
@cindex beta testers mailing list
@cindex announcement mailing list
To report bugs, use the @kbd{C-c C-b} (@code{c-submit-bug-report})
command.  This provides vital information I need to reproduce your
problem.  Make sure you include a concise, but complete code example.
Please try to boil your example down to just the essential code needed
to reproduce the problem, and include an exact recipe of steps needed to
expose the bug.  Be especially sure to include any code that appears
@emph{before} your bug example.

For other help or suggestions, send a message to
@code{cc-mode-help@@anthem.nlm.nih.gov}.

Send an add message to
@code{cc-mode-victims-request@@anthem.nlm.nih.gov} to get on the beta
testers list.  Note that this is a fairly technical discussion list so
you should be moderately Emacs lisp fluent and have anonymous ftp
access.

There is also an announce only list where you will get beta version
update diffs, but will not join in the technical discussions.  You
should still have anon-ftp, and you shouldn't expect beta releases to be
as stable as public releases.  Send an add message to
@code{cc-mode-announce-request@@anthem.nlm.nih.gov} to be added to this
list.

Please use these addresses instead of my personal address so I can keep
track of all the incoming mail!

@c !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@node    Dumping cc-mode 4.155, Concept Index, Mailing Lists and Submitting Bug Reports, Top
@comment node-name,    next,  previous,      up
@chapter  Dumping @code{cc-mode} 4.155
@cindex   Dumping @code{cc-mode} 4.155
@c !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

For now, you're going to be kind of on your own, but here are my, and
other, experiences in dumping Emacs with @code{cc-mode}.  @strong{Some
of this information may be out of date!}  If you like @file{cc-mode.el},
you should lobby RMS to adopt it as @emph{the} implementation of
@code{c-mode}, @code{c++-mode}, and @code{objc-mode} for FSF's Emacs.
Note that if you are using XEmacs 19.11, you do not need to do any of
this.  XEmacs comes with @code{cc-mode} already dumped.  Yay!

Do this:

@example
@group
    % cd <wherever_c_mode.el_is>
    % mv c-mode.el c-mode.el.bak
    % mv cc-mode.el c-mode.el
@end group
@end example

Then byte compile @file{c-mode.el} to produce @file{c-mode.elc}.

In both FSF 19.22 and Lucid 19.9 @file{version.el} is loaded too late in
the @file{loadup.el} file.  @file{cc-mode.el} depends on the value of
@code{emacs-version} so you need to move the load of @file{version.el}
higher up in the file. 

You may need to crank up @code{PURESIZE} in @file{src/pursize.h}.  I
found I had to add about 14k, others have reported an increase of about
23k, but of course YMMV.

Tell your users not to add the @code{f/makunbound}'s or @code{autoload}s to
their @file{.emacs} files, since they'll now get @code{cc-mode} for free.

In Lucid  19.9,   @file{loaddefs.el}  contains a  lot  of  automatically
generated autoload  definitions which will cause  warnings when it finds
pointers to  doc strings.  You  can either  ignore these  warnings (they
won't hurt      you),  or you    can comment   out   the   autoloads for
@code{c++-mode} and @code{c-style}.  Or you can regenerate the automatic
autoloads  once  you've  moved @file{c++-mode.el}   and @file{c-mode.el}
aside, but you'll have to figure this part out by yourself.

I've also been told that under FSF Emacs 19, you  have to get rid of the
autoloads   for  @file{cplus-md*.el} since  @file{c++-mode.el} has  been
renamed. You should also do  an @code{update-directory-autoloads} on the
lisp directory before you redump.


Andrew Hall @code{<fmrco!ahall@@uunet.uu.net>} provides this diff which
applies to FSF's Emacs 19.25.90 @file{loaddefs.el} file.  This zaps the
autoloads for @file{cplus-md.el} and @file{c-mode.el} so you shouldn't
need to do an @code{update-directory-autoloads}.

@example
*** loaddefs.el.orig	Sat Jul  2 15:39:30 1994
--- loaddefs.el	Thu Jul 21 12:23:22 1994
***************
*** 1959,2035 ****
  
  ;;;***
  
- ;;;### (autoloads (c++-mode) "cplus-md" "cplus-md.el" (11649 1462))
- ;;; Generated autoloads from cplus-md.el
- 
- (autoload (quote c++-mode) "cplus-md" "\
- Major mode for editing C++ code.  Very much like editing C code.
- Expression and list commands understand all C++ brackets.
- Tab at left margin indents for C++ code
- Comments are delimited with /* ... */ @{or with // ... <newline>@}
- Paragraphs are separated by blank lines only.
- Delete converts tabs to spaces as it moves back.
- \\@{c++-mode-map@}
- Variables controlling indentation style:
-  c-tab-always-indent
-     Non-nil means TAB in C mode should always reindent the current line,
-     regardless of where in the line point is when the TAB command is used.
-     Default is t.
-  c-auto-newline
-     Non-nil means automatically newline before and after braces,
-     and after colons and semicolons, inserted in C code.
-  c-indent-level
-     Indentation of C statements within surrounding block.
-     The surrounding block's indentation is the indentation
-     of the line on which the open-brace appears.
-  c-continued-statement-offset
-     Extra indentation given to a substatement, such as the
-     then-clause of an if or body of a while.
-  c-continued-brace-offset
-     Extra indentation given to a brace that starts a substatement.
-     This is in addition to c-continued-statement-offset.
-  c-brace-offset
-     Extra indentation for line if it starts with an open brace.
-  c-brace-imaginary-offset
-     An open brace following other text is treated as if it were
-     this far to the right of the start of its line.
-  c-argdecl-indent
-     Indentation level of declarations of C function arguments.
-  c-label-offset
-     Extra indentation for line that is a label, or case or ``default:'', or
-     ``public:'' or ``private:'', or ``protected:''.
-  c++-electric-colon
-     If non-nil at invocation of c++-mode (t is the default) colon electricly
-     indents.
-  c++-empty-arglist-indent
-     If non-nil, a function declaration or invocation which ends a line with a
-     left paren is indented this many extra spaces, instead of flush with the
-     left paren.
-  c++-friend-offset
-     Offset of C++ friend declarations relative to member declarations.
-  c++-member-init-indent
-     Indentation level of member initializations in function declarations,
-     if they are on a separate line beginning with a colon.
-  c++-continued-member-init-offset
-     Extra indentation for continuation lines of member initializations; NIL
-     means to align with previous initializations rather than with the colon.
- 
- Settings for K&R, BSD, and Stroustrup indentation styles are
-   c-indent-level                5    8    4
-   c-continued-statement-offset  5    8    4
-   c-continued-brace-offset                0
-   c-brace-offset               -5   -8    0
-   c-brace-imaginary-offset                0
-   c-argdecl-indent              0    8    4
-   c-label-offset               -5   -8   -4
-   c++-empty-arglist-indent                4
-   c++-friend-offset                       0
- 
- Turning on C++ mode calls the value of the variable `c++-mode-hook' with
- no args if that value is non-nil." t nil)
- 
- ;;;***
- 
  ;;;### (autoloads (dabbrev-expand) "dabbrev" "dabbrev.el" (11577 36858))
  ;;; Generated autoloads from dabbrev.el
  
--- 1959,1964 ----
@end example

@c !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@node    Concept Index, Command Index,  Dumping cc-mode 4.155, Top
@comment node-name,    next,  previous,      up
@unnumbered Concept Index
@c !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

@printindex cp


@c !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@node    Command Index, Key Index,  Concept Index, Top
@comment node-name,    next,  previous,      up
@unnumbered Command Index
@c !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

@ifinfo

@end ifinfo
Since all @code{cc-mode} commands are prepended with the string
@samp{c-}, each appears under its @code{c-<thing>} name and its
@code{<thing> (c-)} name.
@iftex
@sp 2
@end iftex
@printindex fn


@c !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@node    Key Index, Variable Index,  Command Index, Top
@comment node-name,    next,  previous,      up
@unnumbered Key Index
@c !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

@printindex ky


@c !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@node    Variable Index,    ,  Key Index, Top
@comment node-name,    next,  previous,      up
@unnumbered Variable Index
@c !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

@ifinfo

@end ifinfo
Since all @code{cc-mode} variables are prepended with the string
@samp{c-}, each appears under its @code{c-<thing>} name and its
@code{<thing> (c-)} name.
@iftex
@sp 2
@end iftex
@printindex vr
@summarycontents
@contents
@bye
